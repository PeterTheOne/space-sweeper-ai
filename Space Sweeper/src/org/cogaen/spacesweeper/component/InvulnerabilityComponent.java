package org.cogaen.spacesweeper.component;

import org.cogaen.entity.Component;
import org.cogaen.entity.ComponentEntity;
import org.cogaen.event.EventService;
import org.cogaen.spacesweeper.entity.Invulnerable;
import org.cogaen.spacesweeper.event.InvulerableEvent;
import org.cogaen.time.TimeService;
import org.cogaen.time.Timer;

public class InvulnerabilityComponent extends Component implements Invulnerable {

	private double invulnerabilityTime;
	private Timer timer;
	private double timeStamp;
	
	public InvulnerabilityComponent(double time) {
		this.invulnerabilityTime = time;
	}
	
	@Override
	public void initialize(ComponentEntity parent) {
		super.initialize(parent);
		
		getParent().addAttribute(Invulnerable.ATTR_ID, this);
	}
	
	@Override
	public void engage() {
		super.engage();
		this.timer = TimeService.getInstance(getCore()).getTimer();
		this.timeStamp = this.timer.getTime() + invulnerabilityTime;
		
		InvulerableEvent event = new InvulerableEvent(getParent().getId(), this.invulnerabilityTime);
		EventService.getInstance(getCore()).dispatchEvent(event);
	}

	@Override
	public void disengage() {
		this.timer = null;
		super.disengage();
	}

	@Override
	public boolean isInvulnerable() {
		return this.timer.getTime() < this.timeStamp;
	}

	@Override
	public void makeInvulnerable(double time) {
		this.timeStamp = Math.max(this.timer.getTime() + time, this.timeStamp);
		InvulerableEvent event = new InvulerableEvent(getParent().getId(), time);
		EventService.getInstance(getCore()).dispatchEvent(event);
	}

}
